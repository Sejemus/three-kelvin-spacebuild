TK.LO = TK.LO || {}local SpawnedEnts = {}function TK.LO:CanSpawn(ply, item)    local loadout = TK.DB:GetPlayerData(ply, "player_loadout")    local uid = ply:GetNWString("UID")    local validents = {}        for k,v in pairs(loadout) do        if string.match(k, "[%w]+$") != "item" then continue end        table.insert(validents, v)    end        for k,v in pairs(SpawnedEnts[uid]) do        for _,itm in pairs(validents) do            if v.id != itm then continue end            validents[_] = nil            break        end    end        for k,v in pairs(validents) do        if v != item then continue end        return true    end        return falseendfunction TK.LO:SpawnItem(ply, id, trace)    local item = TK.IL:GetItem(id)    item.upgrades = Tk.DB:GetPlayerData(ply, "terminal_upgrades_ore")    local uid = ply:GetNWString("UID")    if !item then return end        local ent = ents.Create(item.class)    ent.id = id    ent.data = item.data    ent.upgrades = item.upgrades    ent:SetModel(item.model)    ent:SetPos(trace.HitPos)    ent:SetAngles(trace.HitNormal:Angle() + Angle(90,0,0))    ent:Spawn()    ent:SetPos(trace.HitPos + trace.HitNormal * ((ent:OBBMaxs().z - ent:OBBMins().z) / 2 - ent:OBBCenter().z))    ent:CallOnRemove("loadout", function(ent, uid)        for k,v in pairs(SpawnedEnts[uid]) do            if v != ent then continue end            SpawnedEnts[uid][k] = nil        end    end, uid)        table.insert(SpawnedEnts[uid], ent)    return entendhook.Add("TKDBPlayerData", "TKLO", function(ply, dbtable, idx, data)    if dbtable != "player_loadout" then return end    local loadout = TK.DB:GetPlayerData(ply, "player_loadout")    local uid = ply:GetNWString("UID")    local validents = {}        for k,v in pairs(loadout) do        if string.match(k, "[%w]+$") != "item" then continue end        table.insert(validents, v)    end        for k,v in pairs(SpawnedEnts[uid]) do        local hasItem = false        for _,itm in pairs(validents) do            if v.id != itm then continue end            validents[_] = nil            hasItem = true            break        end                if hasItem then continue end        v:Remove()    endend)