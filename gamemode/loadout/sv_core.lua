TK.LO = TK.LO || {}local SpawnedEnts = {}util.AddNetworkString("TKLO_Ent")function TK.LO:CanSpawn(ply, item)    print("can spawn", ply, item)    if !item || item == 0 then        ply:SendLua("GAMEMODE:AddNotify(\"No item selected\", NOTIFY_GENERIC, 5)")        return false    end    local loadout = {}    local uid = ply:UID()    local available = 0        for k,v in pairs(TK.DB:GetPlayerData(ply, "player_loadout")) do        if string.match(k, "[%w]+$") == "item" then            table.insert(loadout, v)        end    end        for k,v in pairs(loadout) do        if v == item then            available = available + 1        end    end        if available <= 0 then        ply:SendLua("GAMEMODE:AddNotify(\"That is not part of your loadout\", NOTIFY_GENERIC, 5)")        return false    end        for k,v in pairs(SpawnedEnts[uid] || {}) do        if v.itemid == item then            available = available - 1        end    end        if available <= 0 then        ply:SendLua("GAMEMODE:AddNotify(\"You've already spawned that\", NOTIFY_GENERIC, 5)")        return false    end        print(true)    return trueendfunction TK.LO:SpawnItem(ply, id, pos, angles)    local item = TK.TD:GetItem(id)    if !item then return end    local uid = ply:UID()    if !item then return end        local ent = ents.Create(item.class)    ent.itemid = id    ent.PrintName = item.name    ent:SetModel(item.mdl)    ent:SetPos(pos)    ent:SetAngles(angles)    ent:Spawn()    ent:Update(ply)    ent:CallOnRemove("loadout", function(ent, uid)        for k,v in pairs(SpawnedEnts[uid] || {}) do            if v != ent then continue end            SpawnedEnts[uid][k] = nil        end    end, uid)    SpawnedEnts[uid] = SpawnedEnts[uid] || {}    table.insert(SpawnedEnts[uid], ent)        timer.Simple(0.25, function()        if !IsValid(ent) then return end        net.Start("TKLO_Ent")            net.WriteEntity(ent)            net.WriteString(ent.PrintName)        net.Broadcast()    end)        return entendfunction TK.LO:MakeDupeInfo(ent)    if !ent.itemid then return end    local info = {ent.itemid}    duplicator.StoreEntityModifier(ent, "TKLOInfo", info)endfunction TK.LO:ApplyDupeInfo(ply, ent, CreatedEntities)    if !ent.EntityMods || !ent.EntityMods.TKLOInfo then return end    local id = tonumber(ent.EntityMods.TKLOInfo[1] || 0)    if !self:CanSpawn(ply, id) then        ent:Remove()        return    end        local item = TK.TD:GetItem(id)    local uid = ply:UID()        ent.itemid = id    ent.PrintName = item.name    ent:Update(ply)    ent:CallOnRemove("loadout", function(ent, uid)        for k,v in pairs(SpawnedEnts[uid] || {}) do            if v != ent then continue end            SpawnedEnts[uid][k] = nil        end    end, uid)        timer.Simple(0.25, function()        if !IsValid(ent) then return end        net.Start("TKLO_Ent")            net.WriteEntity(ent)            net.WriteString(ent.PrintName)        net.Broadcast()    end)        SpawnedEnts[uid] = SpawnedEnts[uid] || {}    table.insert(SpawnedEnts[uid], ent)        ent.EntityMods.TKLOInfo = nilendhook.Add("TKDBPlayerData", "TKLO", function(ply, dbtable, idx, data)    if dbtable == "player_loadout" then        local loadout = TK.DB:GetPlayerData(ply, "player_loadout")        local uid = ply:UID()        local validents = {}                for k,v in pairs(loadout) do            if string.match(k, "[%w]+$") != "item" then continue end            table.insert(validents, v)        end                for k,v in pairs(SpawnedEnts[uid] || {}) do            local hasItem = false            for _,itm in pairs(validents) do                if v.id != itm then continue end                validents[_] = nil                hasItem = true                break            end                        if hasItem then continue end            v:Remove()        end    elseif dtable == "terminal_upgrades_ore" then        for k,v in pairs(SpawnedEnts[ply:UID()]) do            if v:GetClass() != "tk_ore_laser" && v:GetClass() != "tk_ore_storage" then continue end            v:Update(ply)        end    elseif dtable == "terminal_upgrades_tib" then        for k,v in pairs(SpawnedEnts[ply:UID()]) do            if v:GetClass() != "tk_tib_extractor" && v:GetClass() != "tk_tib_storage" then continue end            v:Update(ply)        end    endend)hook.Add("PlayerInitialSpawn", "TKLO", function(ply)    timer.Simple(5, function()        if !IsValid(ply) then return end        for k,v in pairs(SpawnedEnts) do            for _,ent in pairs(v) do                if !IsValid(ent) then continue end                net.Start("TKLO_Ent")                    net.WriteEntity(ent)                    net.WriteString(ent.PrintName)                net.Send(ply)            end        end    end)end)