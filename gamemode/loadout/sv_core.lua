TK.LO = TK.LO || {}local SpawnedEnts = {}util.AddNetworkString("TKLO_Ent")function TK.LO:CanSpawn(ply, item)    if !item || item == 0 then return false end    local loadout = TK.DB:GetPlayerData(ply, "player_loadout")    local uid = ply:GetNWString("UID")    local validents = {}        for k,v in pairs(loadout) do        if string.match(k, "[%w]+$") != "item" then continue end        table.insert(validents, v)    end        for k,v in pairs(SpawnedEnts[uid] || {}) do        for _,itm in pairs(validents) do            if v.itemid != itm then continue end            validents[_] = nil            break        end    end        for k,v in pairs(validents) do        if v != item then continue end        return true    end        return falseendfunction TK.LO:SpawnItem(ply, id, pos, angles)    local item = TK.TD:GetItem(id)    if !item then return end    local uid = ply:GetNWString("UID")    if !item then return end        local ent = ents.Create(item.class)    ent.itemid = id    ent.PrintName = item.name    ent:SetModel(item.mdl)    ent:SetPos(pos)    ent:SetAngles(angles)    ent:Spawn()    ent:Update(ply)    ent:CallOnRemove("loadout", function(ent, uid)        for k,v in pairs(SpawnedEnts[uid] || {}) do            if v != ent then continue end            SpawnedEnts[uid][k] = nil        end    end, uid)        timer.Simple(0.25, function()        net.Start("TKLO_Ent")            net.WriteEntity(ent)            net.WriteString(ent.PrintName)        net.Broadcast()    end)        SpawnedEnts[uid] = SpawnedEnts[uid] || {}    table.insert(SpawnedEnts[uid], ent)    return entendfunction TK.LO:MakeDupeInfo(ent)	if !ent.itemid then return end	local info = {ent.itemid}	duplicator.StoreEntityModifier(ent, "TKLOInfo", info)endfunction TK.LO:ApplyDupeInfo(ply, ent, CreatedEntities)	if !ent.EntityMods || !ent.EntityMods.TKLOInfo then return end	local id = tonumber(ent.EntityMods.TKLOInfo[1] || 0)    if !self:CanSpawn(ply, id) then        ent:Remove()        return    end        local item = TK.TD:GetItem(id)    local uid = ply:GetNWString("UID")        ent.itemid = id    ent.PrintName = item.name    ent:Update(ply)    ent:CallOnRemove("loadout", function(ent, uid)        for k,v in pairs(SpawnedEnts[uid] || {}) do            if v != ent then continue end            SpawnedEnts[uid][k] = nil        end    end, uid)        timer.Simple(0.25, function()        net.Start("TKLO_Ent")            net.WriteEntity(ent)            net.WriteString(ent.PrintName)        net.Broadcast()    end)        SpawnedEnts[uid] = SpawnedEnts[uid] || {}    table.insert(SpawnedEnts[uid], ent)    	ent.EntityMods.TKLOInfo = nilendhook.Add("TKDBPlayerData", "TKLO", function(ply, dbtable, idx, data)    if dbtable == "player_loadout" then        local loadout = TK.DB:GetPlayerData(ply, "player_loadout")        local uid = ply:GetNWString("UID")        local validents = {}                for k,v in pairs(loadout) do            if string.match(k, "[%w]+$") != "item" then continue end            table.insert(validents, v)        end                for k,v in pairs(SpawnedEnts[uid] || {}) do            local hasItem = false            for _,itm in pairs(validents) do                if v.id != itm then continue end                validents[_] = nil                hasItem = true                break            end                        if hasItem then continue end            v:Remove()        end    elseif dtable == "terminal_upgrades_ore" then        for k,v in pairs(SpawnedEnts[ply:GetNWString("UID")]) do            if v:GetClass() != "tk_ore_laser" && v:GetClass() != "tk_ore_storage" then continue end            v:Update(ply)        end    elseif dtable == "terminal_upgrades_tib" then        for k,v in pairs(SpawnedEnts[ply:GetNWString("UID")]) do            if v:GetClass() != "tk_tib_extractor" && v:GetClass() != "tk_tib_storage" then continue end            v:Update(ply)        end    endend)hook.Add("PlayerAuthed", "TKLO", function(ply)    timer.Simple(1, function()        if !IsValid(ply) then return end        for k,v in pairs(SpawnedEnts) do            for _,ent in pairs(v) do                net.Start("TKLO_Ent")                    net.WriteEntity(ent)                    net.WriteString(ent.PrintName)                net.Send(ply)            end        end    end)end)